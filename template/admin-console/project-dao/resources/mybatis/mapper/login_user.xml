<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- Automatic generated on ${currentTime} by CrudCodeGenerator wirtten by Gerald Chen -->

<mapper namespace="${packagePrefix}.dao.LoginUserDAO">

	<resultMap type="${packagePrefix}.dataobject.LoginUserDO" id="loginUserMap">
        <result property="id" column="id" />
        <result property="username" column="username" />
        <result property="password" column="password" />
        <result property="mobile" column="mobile" />
        <result property="email" column="email" />
        <result property="name" column="name" />
        <result property="status" column="status" />
        <result property="authKey" column="auth_key" />
        <result property="attributes" column="attributes" />
        <result property="gmtCreate" column="gmt_create" />
        <result property="gmtModify" column="gmt_modified" />

    </resultMap>
    
    <sql id="AllColumns">
		id,
		username,
		password,
		mobile, 
		email, 
		name, 
		status, 
		auth_key, 
		attributes, 
		gmt_create,
		gmt_modified
    </sql>
    
    
    <sql id="ColumnsWithoutPassword">
		id,
		username,
		mobile, 
		email, 
		name, 
		status, 
		auth_key, 
		attributes, 
		gmt_create,
		gmt_modified
    </sql>
    
    <sql id="InfoManageSet">
        <set>
			<if test="username != null">username=#{username},</if>
			<if test="password != null">password=#{password},</if>
			<if test="mobile != null">mobile=#{mobile},</if>
			<if test="email != null">email=#{email},</if>
			<if test="name != null">name=#{name},</if>
			<if test="status != null">status=#{status},</if>
			<if test="authKey != null">auth_key=#{authKey},</if>
			<if test="attributes != null">attributes=#{attributes},</if>

        </set>
    </sql>
    
    <sql id="Where_QueryCondition">
        <where>
			<if test="id != null">
			    id = #{id} 
			</if>
     		<if test="username != null">
			    AND username = #{username} 
     		</if>
     		<if test="mobile != null">
			    AND mobile = #{mobile} 
     		</if>
     		<if test="email != null">
			    AND email = #{email} 
     		</if>
     		<if test="status != null">
			    AND status = #{status} 
     		</if>
     		<if test="nameLike != null">
			    AND name LIKE CONCAT('%', #{nameLike}, '%') 
     		</if>
	        
	        <if test="minId != null">
	            <![CDATA[
	            AND id >= #{minId} 
	        	]]>
	        </if>
	        <if test="maxId != null">
	            <![CDATA[
	            AND id <= #{maxId} 
	        	]]>
	        </if>
	        <if test="ids != null and ids.size() > 0">
	            AND id IN
	            <foreach item="id" index="index" collection="ids"
	                     open="(" separator="," close=")">
	                #{id}
	            </foreach>
	        </if>
	        <if test="gmtCreateRange != null and gmtCreateRange.start != null">
	            <![CDATA[
	            AND gmt_create >= #{gmtCreateRange.start} 
	        	]]>
	        </if>
	        <if test="gmtCreateRange != null and gmtCreateRange.end != null">
	            <![CDATA[
	            AND gmt_create <= #{gmtCreateRange.end} 
	        	]]>
	        </if>
	        <if test="gmtModifyRange != null and gmtModifyRange.start != null">
	            <![CDATA[
	            AND gmt_modified >= #{gmtModifyRange.start} 
	        	]]>
	        </if>
	        <if test="gmtModifyRange != null and gmtModifyRange.end != null">
	            <![CDATA[
	            AND gmt_modified <= #{gmtModifyRange.end} 
	        	]]>
	        </if>
        </where>
    </sql>
    
    
    <sql id="OrderBy">
        <choose>
	        <when test="orderByList != null and orderByList.size() > 0">
	            <foreach item="orderby" index="index" collection="orderByList" open="" separator="," close="">
                	${orderby.key} ${orderby.value}
            	</foreach>
	        </when>
	        <otherwise>
	            gmt_create DESC 
	        </otherwise>
        </choose>
    </sql>
    
    <select id="getById" resultMap="loginUserMap">
    	SELECT  
    		<include refid="ColumnsWithoutPassword" /> 
    	FROM login_user WHERE id = #{id} LIMIT 1
    </select>
    
    <select id="matchUserByQueryKey" resultMap="loginUserMap">
    	SELECT  
    		<include refid="ColumnsWithoutPassword" /> 
    	FROM login_user WHERE (
    		username = #{q} OR 
    		mobile = #{q} OR 
    		email = #{q}
    	) 
    	LIMIT 1
    </select>
    
    <select id="checkLogin" resultMap="loginUserMap">
    	SELECT  
    		<include refid="ColumnsWithoutPassword" />  
    	FROM login_user 
    	WHERE username = #{username} 
    	AND password = #{password} LIMIT 1
    </select>
    
    <select id="queryList" parameterType="${packagePrefix}.query.LoginUserQuery" resultMap="loginUserMap">
    	SELECT  
    		<include refid="ColumnsWithoutPassword" />
    	FROM login_user  
    		<include refid="Where_QueryCondition" />
    	ORDER BY 
    		<include refid="OrderBy" /> 
        LIMIT #{start}, #{limit}
    </select>
    
    <select id="count" parameterType="${packagePrefix}.query.LoginUserQuery" resultType="java.lang.Integer">
    	SELECT count(id) 
    	FROM login_user  
    	<include refid="Where_QueryCondition" />
    </select>

    <insert id="insert" parameterType="${packagePrefix}.dataobject.LoginUserDO" useGeneratedKeys="true" keyProperty="id">
        INSERT login_user 
        <include refid="InfoManageSet" />
    </insert>
    
    
    <insert id="insertBatch" parameterType="java.util.List" useGeneratedKeys="true" keyProperty="id"> 
	    INSERT INTO login_user(username,password,mobile,email,name,status,auth_key, attributes)  
	    VALUES 
	    <foreach collection="list" item="obj" index="index" separator=",">  
	       (#{obj.username},#{obj.password},#{obj.mobile},#{obj.email},#{obj.name},#{obj.status},#{obj.authKey},#{obj.attributes})  
	    </foreach>  
    </insert>

    <update id="update" parameterType="${packagePrefix}.dataobject.LoginUserDO">
        UPDATE login_user 
        <include refid="InfoManageSet" />
        WHERE id = #{id} 
        <if test="version != null">
            AND version=#{version}
        </if>
    </update>
    
    <update id="resetPassword">
        UPDATE login_user SET password = #{password} 
        WHERE id = #{userid} 
    </update>
    
    <delete id="deleteById">
    	DELETE FROM login_user WHERE id = #{id}
    </delete>
    
    <update id="resetSecondAuth" parameterType="${packagePrefix}.dataobject.LoginUserDO">
		UPDATE login_user SET 
		auth_key = null, 
		attributes = #{attributes} 
		WHERE id = #{id}
	</update>
    

</mapper>