/* Automatic generated by CrudCodeGenerator wirtten by Gerald Chen
 *
 * @(#)RoleServiceImpl.java	${date}
 *
 * Copyright (c) ${year}. All Rights Reserved.
 *
 */

package ${packagePrefix}.service.impl;

import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.github.javaclub.sword.core.BizObjects;
import com.github.javaclub.sword.domain.QueryResult;
import com.github.javaclub.sword.domain.ResultDO;
import com.github.javaclub.sword.domain.dto.BatchOperationDTO;
import com.github.javaclub.sword.domain.enumtype.BasicMessage;
import com.google.common.collect.Lists;
import ${packagePrefix}.dao.RoleDAO;
import ${packagePrefix}.dao.RoleMenuDAO;
import ${packagePrefix}.dao.RoleResourceDAO;
import ${packagePrefix}.dataobject.RoleDO;
import ${packagePrefix}.dataobject.RoleMenuDO;
import ${packagePrefix}.dataobject.RoleResourceDO;
import ${packagePrefix}.query.RoleQuery;
import ${packagePrefix}.service.RoleService;
import ${packagePrefix}.service.params.AuthMenuParam;
import ${packagePrefix}.service.params.RoleParam;

/**
 * RoleServiceImpl
 *
 * @version $Id: RoleServiceImpl.java ${currentTime} Exp $
 */
@Service("roleService")
public class RoleServiceImpl implements RoleService {
	
	static final Logger log = LoggerFactory.getLogger(RoleServiceImpl.class);
	
	@Autowired
	private RoleDAO roleDAO;
	
	@Autowired
	private RoleResourceDAO roleResourceDAO;
	
	@Autowired
	private RoleMenuDAO roleMenuDAO;

	/**
	 * 创建时的业务校验
	 * 
	 * @param roleDO 业务实体
	 */
	void doCreateCheck(RoleDO roleDO) {
		// TODO Auto-generated method stub
		
	}
	
	/**
	 * 更新时的业务校验
	 * 
	 * @param roleDO 业务实体
	 */
	void doUpdateCheck(RoleDO roleDO) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public ResultDO<Boolean> save(RoleDO roleDO) {
		if(null == roleDO.getId()) {
			return create(roleDO);
		}
		RoleDO db = roleDAO.getById(roleDO.getId());
		if(null == db) {
			return ResultDO.failure(BasicMessage.NOT_FOUND);
		}
		return update(roleDO);
	}

	@Override
	@Transactional
	public ResultDO<Boolean> saveBatch(RoleParam param) {
		RoleDO role = param.getRole();
		role.setCreator(param.getCreator());
		role.setModifier(param.getModifier());
		if(null == role.getId() || 0 >= role.getId()) {
			roleDAO.insert(role);
		} else {
			roleDAO.update(role);
		}
		Long roleId = role.getId();
		// 资源关联表
		roleResourceDAO.deleteByRoleId(roleId);
		List<AuthMenuParam> list = param.getMenuParams();
		List<RoleMenuDO> rMenuList = Lists.newArrayList();
		if (null != list) {
			List<RoleResourceDO> resList = Lists.newArrayList();
			for (AuthMenuParam amp : list) {
				if(null != amp && BizObjects.length(amp.getBindResources()) > 0) {
					for (Long resId : amp.getBindResources()) {
						RoleResourceDO rres = new RoleResourceDO();
						rres.setCreator(param.getCreator());
						rres.setModifier(param.getModifier());
						rres.setRoleId(roleId);
						rres.setResourceId(resId);
						resList.add(rres);
					}
				}
				RoleMenuDO rmenu = new RoleMenuDO();
				rmenu.setCreator(param.getCreator());
				rmenu.setModifier(param.getModifier());
				rmenu.setRoleId(roleId);
				rmenu.setMenuId(amp.getMenuId());
				rMenuList.add(rmenu);
			}
			if(resList.size() > 0) {
				roleResourceDAO.insertBatch(resList);
			}
		}
		
		// 菜单关联表
		roleMenuDAO.deleteByRoleId(roleId);
		if(rMenuList.size() > 0) {
			roleMenuDAO.insertBatch(rMenuList);
		}
		
		return ResultDO.success(true);
	}

	@Override
	public ResultDO<Boolean> create(RoleDO roleDO) {
		ResultDO<Boolean> result = ResultDO.failure();
		try {
			this.doCreateCheck(roleDO);
			int num = roleDAO.insert(roleDO);
			result = ResultDO.result(num > 0, "创建记录失败");
		} catch (Exception e) {
			log.error("", e);
			result.setMessage(e.getMessage());
		}
		return result;
	}

	@Override
	public BatchOperationDTO<RoleDO> createBatch(List<RoleDO> list) {
		BatchOperationDTO<RoleDO> bod = new BatchOperationDTO<RoleDO>();
		List<RoleDO> toAdd = Lists.newArrayList();
		for (RoleDO item : list) {
			try {
				this.doCreateCheck(item);
			} catch (Exception e) {
				bod.addFailure(item);
				continue;
			}
			toAdd.add(item);
		}
		
		try {
			if(toAdd.size() > 0) {
				roleDAO.insertBatch(toAdd);
				bod.setSuccessList(toAdd);
			}
		} catch (Exception e) {
			bod.setMessage(e.getMessage());
			log.error("RoleService createBatch", e);
		}
		
		return bod;
	}

	@Override
	public ResultDO<Boolean> update(RoleDO roleDO) {
		ResultDO<Boolean> result = ResultDO.failure();
		try {
			BizObjects.requireNotNull(roleDO.getId(), "主键ID不能为空");
			this.doUpdateCheck(roleDO);
			int num = roleDAO.update(roleDO);
			result = ResultDO.result(num > 0, "没有记录被更新");
		} catch (Exception e) {
			log.error("", e);
			result.setMessage(e.getMessage());
		}
		return result;
	}

	@Override
	public ResultDO<Boolean> deleteById(Long id) {
		ResultDO<Boolean> result = ResultDO.failure();
		try {
			int num = roleDAO.deleteById(id);
			result = ResultDO.result(num > 0, "没有记录被删除");
		} catch (Exception e) {
			log.error("", e);
			result.setMessage(e.getMessage());
		}
		return result;
	}

	@Override
	public ResultDO<RoleDO> getById(Long id) {
		ResultDO<RoleDO> result = ResultDO.failure();
		try {
			RoleDO dbRecord = roleDAO.getById(id);
			if(null != dbRecord) {
				result = ResultDO.success(dbRecord);
			}
		} catch (Exception e) {
			log.error("", e);
			result.setMessage(e.getMessage());
		}
		
		return result;
	}
	
	@Override
	public RoleDO selectById(Long id) {
		return roleDAO.getById(id);
	}
	
	@Override
	public RoleDO selectOne(RoleQuery query) {
		List<RoleDO> list = roleDAO.queryList(query);
		if(null != list && list.size() > 0) {
			return list.get(0);
		}
		return null;
	}

	@Override
	public int count(RoleQuery query) {
		return roleDAO.count(query);
	}

	@Override
	public List<RoleDO> findList(RoleQuery query) {
		return roleDAO.queryList(query);
	}

	@Override
	public QueryResult<RoleDO> findListWithCount(RoleQuery query) {
		QueryResult<RoleDO> queryResult = new QueryResult<RoleDO>();
		try {
			List<RoleDO> list = roleDAO.queryList(query);
			int count = roleDAO.count(query);
			queryResult.setTotalCount(count);
			queryResult.setEntry(list);
			queryResult.setSuccess(true);
		} catch (Exception e) {
			log.error("", e);
			queryResult.setSuccess(false);
			queryResult.setMessage(e.getMessage());
		}
		return queryResult;
	}

	@Override
	public List<RoleDO> findUserRoleList(Long userId) {
		return roleDAO.findUserRoleList(userId);
	}

}
