/* Automatic generated by CrudCodeGenerator wirtten by Gerald Chen
 *
 * @(#)ResourceServiceImpl.java	${date}
 *
 * Copyright (c) ${year} - 2099. All Rights Reserved.
 *
 */

package ${packagePrefix}.service.impl;

import java.util.List;
import java.util.Objects;
import java.util.Set;
import java.util.stream.Collectors;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.github.javaclub.sword.core.BizObjects;
import com.github.javaclub.sword.core.Collections;
import com.github.javaclub.sword.core.Numbers;
import com.github.javaclub.sword.core.Strings;
import com.github.javaclub.sword.domain.QueryResult;
import com.github.javaclub.sword.domain.ResultDO;
import com.github.javaclub.sword.domain.dto.BatchOperationDTO;
import com.github.javaclub.sword.domain.enumtype.BasicMessage;
import com.google.common.collect.Lists;
import com.google.common.collect.Sets;
import ${packagePrefix}.dao.MenuModuleDAO;
import ${packagePrefix}.dao.ResourceDAO;
import ${packagePrefix}.dao.UserRoleDAO;
import ${packagePrefix}.dataobject.MenuModuleDO;
import ${packagePrefix}.dataobject.ResourceDO;
import ${packagePrefix}.query.ResourceQuery;
import ${packagePrefix}.service.ResourceService;

/**
 * ResourceServiceImpl
 *
 * @version $Id: ResourceServiceImpl.java ${currentTime} Exp $
 */
@Service("resourceService")
public class ResourceServiceImpl implements ResourceService {
	
	static final Logger log = LoggerFactory.getLogger(ResourceServiceImpl.class);
	
	@Autowired
	private ResourceDAO resourceDAO;
	
	@Autowired
	private UserRoleDAO userRoleDAO;
	
	@Autowired
	private MenuModuleDAO menuModuleDAO;

	/**
	 * 创建时的业务校验
	 * 
	 * @param resourceDO 业务实体
	 */
	void doCreateCheck(ResourceDO resourceDO) {
		// TODO Auto-generated method stub
		
	}
	
	/**
	 * 更新时的业务校验
	 * 
	 * @param resourceDO 业务实体
	 */
	void doUpdateCheck(ResourceDO resourceDO) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public ResultDO<Boolean> save(ResourceDO resourceDO) {
		if(null == resourceDO.getId()) {
			return create(resourceDO);
		}
		ResourceDO db = resourceDAO.getById(resourceDO.getId());
		if(null == db) {
			return ResultDO.failure(BasicMessage.NOT_FOUND);
		}
		return update(resourceDO);
	}

	@Override
	public ResultDO<Boolean> create(ResourceDO resourceDO) {
		ResultDO<Boolean> result = ResultDO.failure();
		try {
			this.doCreateCheck(resourceDO);
			int num = resourceDAO.insert(resourceDO);
			result = ResultDO.result(num > 0, "创建记录失败");
		} catch (Exception e) {
			log.error("", e);
			result.setMessage(e.getMessage());
		}
		return result;
	}

	@Override
	public BatchOperationDTO<ResourceDO> createBatch(List<ResourceDO> list) {
		BatchOperationDTO<ResourceDO> bod = new BatchOperationDTO<ResourceDO>();
		List<ResourceDO> toAdd = Lists.newArrayList();
		for (ResourceDO item : list) {
			try {
				this.doCreateCheck(item);
			} catch (Exception e) {
				bod.addFailure(item);
				continue;
			}
			toAdd.add(item);
		}
		
		try {
			if(toAdd.size() > 0) {
				resourceDAO.insertBatch(toAdd);
				bod.setSuccessList(toAdd);
			}
		} catch (Exception e) {
			bod.setMessage(e.getMessage());
			log.error("ResourceService createBatch", e);
		}
		
		return bod;
	}

	@Override
	public ResultDO<Boolean> update(ResourceDO resourceDO) {
		ResultDO<Boolean> result = ResultDO.failure();
		try {
			BizObjects.requireNotNull(resourceDO.getId(), "主键ID不能为空");
			this.doUpdateCheck(resourceDO);
			int num = resourceDAO.update(resourceDO);
			result = ResultDO.result(num > 0, "没有记录被更新");
		} catch (Exception e) {
			log.error("", e);
			result.setMessage(e.getMessage());
		}
		return result;
	}

	@Override
	public ResultDO<Boolean> deleteById(Long id) {
		ResultDO<Boolean> result = ResultDO.failure();
		try {
			int num = resourceDAO.deleteById(id);
			result = ResultDO.result(num > 0, "没有记录被删除");
		} catch (Exception e) {
			log.error("", e);
			result.setMessage(e.getMessage());
		}
		return result;
	}

	@Override
	public ResultDO<ResourceDO> getById(Long id) {
		ResultDO<ResourceDO> result = ResultDO.failure();
		try {
			ResourceDO dbRecord = resourceDAO.getById(id);
			if(null != dbRecord) {
				result = ResultDO.success(dbRecord);
			}
		} catch (Exception e) {
			log.error("", e);
			result.setMessage(e.getMessage());
		}
		
		return result;
	}
	
	@Override
	public ResourceDO selectById(Long id) {
		return resourceDAO.getById(id);
	}
	
	@Override
	public ResourceDO selectOne(ResourceQuery query) {
		List<ResourceDO> list = resourceDAO.queryList(query);
		if(null != list && list.size() > 0) {
			return list.get(0);
		}
		return null;
	}

	@Override
	public int count(ResourceQuery query) {
		return resourceDAO.count(query);
	}

	@Override
	public List<ResourceDO> findList(ResourceQuery query) {
		return resourceDAO.queryList(query);
	}

	@Override
	public QueryResult<ResourceDO> findListWithCount(ResourceQuery query) {
		QueryResult<ResourceDO> queryResult = new QueryResult<ResourceDO>();
		try {
			List<ResourceDO> list = resourceDAO.queryList(query);
			int count = resourceDAO.count(query);
			queryResult.setTotalCount(count);
			queryResult.setEntry(list);
			queryResult.setSuccess(true);
		} catch (Exception e) {
			log.error("", e);
			queryResult.setSuccess(false);
			queryResult.setMessage(e.getMessage());
		}
		return queryResult;
	}

	@Override
	public List<ResourceDO> findUserResourceList(Long userId) {
		List<ResourceDO> result = Lists.newArrayList();
		List<Long> roleIds = userRoleDAO.queryUserRoles(userId);
		if (Collections.isEmpty(roleIds)) {
			return result;
		}
		List<ResourceDO> list = resourceDAO.queryRoleResourceList(roleIds);
		if (null != list) {
			result.addAll(list);
			List<Long> queryedIds = list.stream().map(ResourceDO::getId).collect(Collectors.toList());
			
			List<MenuModuleDO> mmList = menuModuleDAO.queryUserModuleResource(roleIds);
			if (null != mmList) {
				Set<Long> toQueryIds = Sets.newHashSet();
				for (MenuModuleDO mmd : mmList) {
					if (null != mmd.getAttributesMap() && mmd.getAttributesMap().containsKey(MenuModuleDO.ATTR_RESID_MOUDLE)) {
						String text = Objects.toString(mmd.getAttributesMap().get(MenuModuleDO.ATTR_RESID_MOUDLE), "");
						List<Long> someIds = Numbers.splitAsLongList(text, ",");
						for (Long id : someIds) {
							if (!queryedIds.contains(id)) {
								toQueryIds.add(id);
							}
						}
					}
				}
				if (!toQueryIds.isEmpty()) {
					ResourceQuery query = new ResourceQuery();
					query.setIds(Lists.newArrayList(toQueryIds));
					List<ResourceDO> qList = resourceDAO.queryList(query);
					if (null != qList) {
						result.addAll(qList);
					}
				}
				
			}
		}
		
		return result;
	}
	

}
