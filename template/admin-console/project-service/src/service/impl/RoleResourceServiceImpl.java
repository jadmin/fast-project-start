/* Automatic generated by CrudCodeGenerator wirtten by Gerald Chen
 *
 * @(#)RoleResourceServiceImpl.java	${date}
 *
 * Copyright (c) ${year}. All Rights Reserved.
 *
 */

package ${packagePrefix}.service.impl;

import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.github.javaclub.sword.core.BizObjects;
import ${packagePrefix}.dao.RoleResourceDAO;
import ${packagePrefix}.dataobject.RoleResourceDO;
import ${packagePrefix}.query.RoleResourceQuery;
import ${packagePrefix}.service.RoleResourceService;
import com.github.javaclub.sword.domain.QueryResult;
import com.github.javaclub.sword.domain.ResultDO;
import com.github.javaclub.sword.domain.dto.BatchOperationDTO;
import com.github.javaclub.sword.domain.enumtype.BasicMessage;
import com.google.common.collect.Lists;

/**
 * RoleResourceServiceImpl
 *
 * @version $Id: RoleResourceServiceImpl.java ${currentTime} Exp $
 */
@Service("roleResourceService")
public class RoleResourceServiceImpl implements RoleResourceService {
	
	static final Logger log = LoggerFactory.getLogger(RoleResourceServiceImpl.class);
	
	@Autowired
	private RoleResourceDAO roleResourceDAO;

	/**
	 * 创建时的业务校验
	 * 
	 * @param roleResourceDO 业务实体
	 */
	void doCreateCheck(RoleResourceDO roleResourceDO) {
		// TODO Auto-generated method stub
		
	}
	
	/**
	 * 更新时的业务校验
	 * 
	 * @param roleResourceDO 业务实体
	 */
	void doUpdateCheck(RoleResourceDO roleResourceDO) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public ResultDO<Boolean> save(RoleResourceDO roleResourceDO) {
		if(null == roleResourceDO.getId()) {
			return create(roleResourceDO);
		}
		RoleResourceDO db = roleResourceDAO.getById(roleResourceDO.getId());
		if(null == db) {
			return ResultDO.failure(BasicMessage.NOT_FOUND);
		}
		return update(roleResourceDO);
	}

	@Override
	public ResultDO<Boolean> create(RoleResourceDO roleResourceDO) {
		ResultDO<Boolean> result = ResultDO.failure();
		try {
			this.doCreateCheck(roleResourceDO);
			int num = roleResourceDAO.insert(roleResourceDO);
			result = ResultDO.result(num > 0, "创建记录失败");
		} catch (Exception e) {
			log.error("", e);
			result.setMessage(e.getMessage());
		}
		return result;
	}

	@Override
	public BatchOperationDTO<RoleResourceDO> createBatch(List<RoleResourceDO> list) {
		BatchOperationDTO<RoleResourceDO> bod = new BatchOperationDTO<RoleResourceDO>();
		List<RoleResourceDO> toAdd = Lists.newArrayList();
		for (RoleResourceDO item : list) {
			try {
				this.doCreateCheck(item);
			} catch (Exception e) {
				bod.addFailure(item);
				continue;
			}
			toAdd.add(item);
		}
		
		try {
			if(toAdd.size() > 0) {
				roleResourceDAO.insertBatch(toAdd);
				bod.setSuccessList(toAdd);
			}
		} catch (Exception e) {
			bod.setMessage(e.getMessage());
			log.error("RoleResourceService createBatch", e);
		}
		
		return bod;
	}

	@Override
	public ResultDO<Boolean> update(RoleResourceDO roleResourceDO) {
		ResultDO<Boolean> result = ResultDO.failure();
		try {
			BizObjects.requireNotNull(roleResourceDO.getId(), "主键ID不能为空");
			this.doUpdateCheck(roleResourceDO);
			int num = roleResourceDAO.update(roleResourceDO);
			result = ResultDO.result(num > 0, "没有记录被更新");
		} catch (Exception e) {
			log.error("", e);
			result.setMessage(e.getMessage());
		}
		return result;
	}

	@Override
	public ResultDO<Boolean> deleteById(Long id) {
		ResultDO<Boolean> result = ResultDO.failure();
		try {
			int num = roleResourceDAO.deleteById(id);
			result = ResultDO.result(num > 0, "没有记录被删除");
		} catch (Exception e) {
			log.error("", e);
			result.setMessage(e.getMessage());
		}
		return result;
	}

	@Override
	public ResultDO<RoleResourceDO> getById(Long id) {
		ResultDO<RoleResourceDO> result = ResultDO.failure();
		try {
			RoleResourceDO dbRecord = roleResourceDAO.getById(id);
			if(null != dbRecord) {
				result = ResultDO.success(dbRecord);
			}
		} catch (Exception e) {
			log.error("", e);
			result.setMessage(e.getMessage());
		}
		
		return result;
	}
	
	@Override
	public RoleResourceDO selectById(Long id) {
		return roleResourceDAO.getById(id);
	}
	
	@Override
	public RoleResourceDO selectOne(RoleResourceQuery query) {
		List<RoleResourceDO> list = roleResourceDAO.queryList(query);
		if(null != list && list.size() > 0) {
			return list.get(0);
		}
		return null;
	}

	@Override
	public int count(RoleResourceQuery query) {
		return roleResourceDAO.count(query);
	}

	@Override
	public List<RoleResourceDO> findList(RoleResourceQuery query) {
		return roleResourceDAO.queryList(query);
	}

	@Override
	public QueryResult<RoleResourceDO> findListWithCount(RoleResourceQuery query) {
		QueryResult<RoleResourceDO> queryResult = new QueryResult<RoleResourceDO>();
		try {
			List<RoleResourceDO> list = roleResourceDAO.queryList(query);
			int count = roleResourceDAO.count(query);
			queryResult.setTotalCount(count);
			queryResult.setEntry(list);
			queryResult.setSuccess(true);
		} catch (Exception e) {
			log.error("", e);
			queryResult.setSuccess(false);
			queryResult.setMessage(e.getMessage());
		}
		return queryResult;
	}

}
