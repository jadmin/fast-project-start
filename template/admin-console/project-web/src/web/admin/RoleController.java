/* Automatic generated by CrudCodeGenerator wirtten by Gerald Chen
 *
 * @(#)RoleController.java	${date}
 *
 * Copyright (c) ${year} - 2099. All Rights Reserved.
 *
 */

package ${packagePrefix}.web.admin;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.github.javaclub.sword.BizException;
import com.github.javaclub.sword.core.BizObjects;
import com.github.javaclub.sword.core.Numbers;
import com.github.javaclub.sword.core.Strings;
import com.github.javaclub.sword.domain.QueryResult;
import com.github.javaclub.sword.domain.ResultDO;
import com.github.javaclub.sword.util.WebUtil;
import com.github.javaclub.sword.web.HttpResult;
import com.github.javaclub.sword.web.PageResultSet;
import com.google.common.collect.Lists;
import com.google.common.collect.Maps;
import ${packagePrefix}.dao.UserRoleDAO;
import ${packagePrefix}.dataobject.RoleDO;
import ${packagePrefix}.dataobject.RoleUserDO;
import ${packagePrefix}.dataobject.UserRoleDO;
import ${packagePrefix}.dataobject.UserRoleExtDO;
import ${packagePrefix}.query.RoleQuery;
import ${packagePrefix}.query.RoleUserQuery;
import ${packagePrefix}.service.RoleService;
import ${packagePrefix}.service.params.RoleParam;
import ${packagePrefix}.service.params.RoleUserParam;

/**
 * RoleController
 *
 * @author <a href="mailto:gerald.chen.hz@gmail.com">Gerald Chen</a>
 * @version $Id: RoleController.java ${currentTime} Exp $
 */
@RestController
@RequestMapping("/admin/role")
public class RoleController extends AdminControllerBase {
	
	static final Logger log = LoggerFactory.getLogger(RoleController.class);
	
	@Autowired
	private RoleService roleService;
	
	@Autowired
	private UserRoleDAO userRoleDAO;
	
	@PostMapping(value = "/saveRoleUserRequest")
	public HttpResult<Long> saveRoleUserRequest(@RequestBody RoleUserParam param) throws Exception {
		try {
			Long id = param.getId();
			if (null != id && 0 < id) {
				UserRoleDO urd = userRoleDAO.getById(id);
				if(null != urd) {
					param.setExpiredTime(urd.getExpiredTime());
					param.doReinitExpiredTime();
					userRoleDAO.prolongExpiredTime(param.toUserRoleDO());
				}
			} else {
				UserRoleDO urd = userRoleDAO.getByUserIdAndRoleId(param.getUserId(), param.getRoleId());
				if(null != urd) {
					throw new  BizException("用户角色记录已存在，请勿重复添加！");
				}
				param.doReinitExpiredTime();
				userRoleDAO.insert(param.toUserRoleDO());
			}
		} catch (BizException e) {
			return HttpResult.failure(e.getMessage());
		}
        
        return HttpResult.success(param.getId());
	}
	
	
	@PostMapping(value = "/saveRequest")
	public HttpResult<Long> saveRequest(@RequestBody RoleParam param) throws Exception {
		RoleDO post = param.getRole();
		try {
			boolean isCodeRegular = Strings.isGeneralStrict(post.getRoleCode());
			BizObjects.requireTrue(isCodeRegular, "角色代码必须为字母/数字/下划线字符串");
			param.setCreator(getLoginUsername());
			param.setModifier(getLoginUsername());
		} catch (BizException e) {
			return HttpResult.failure(e.getMessage());
		}
		
		ResultDO<Boolean> r = roleService.saveBatch(param);
        if(!r.isSuccess()) {
            return HttpResult.failure(r.getMessage());
        }
        
        return HttpResult.success(post.getId());
	}
	
	@GetMapping(value = "/detail")
	public HttpResult<RoleDO> detail(Long id) {
		return doDetail(id);
	}
	
	@GetMapping(value = "/detail/{id}")
	public HttpResult<RoleDO> _detail(@PathVariable Long id) {
		return doDetail(id);
	}

	@PostMapping(value = "/delete")
	public HttpResult<Boolean> delete(Long id) {
		return doDelete(id);
	}

	@PostMapping(value = "/delete/{id}")
	public HttpResult<Boolean> _delete(@PathVariable Long id) {
		return doDelete(id);
	}
	
	@PostMapping(value = "/delRoleUser")
	public HttpResult<Boolean> delRoleUser(Long id) {
		UserRoleDO db = userRoleDAO.getById(id);
		if(null == db) { // 不存在
			return HttpResult.failure("数据不存在或已被删除");
		}
		int row = userRoleDAO.deleteById(id);
		if(0 >= row) {
			return HttpResult.failure("很遗憾，操作失败！");
		}
		return HttpResult.success();
	}
	
	@GetMapping(value = "/pagelist")
	public HttpResult<PageResultSet<RoleDO>> list(@RequestBody RoleQuery request) {
		QueryResult<RoleDO> queryResult = roleService.findListWithCount(request);
		PageResultSet<RoleDO> sets = new PageResultSet<>(request.getPageNo(), request.getPageSize());
		sets.setAllRow(queryResult.getTotalCount());
		sets.setList(queryResult.getEntry());
		return HttpResult.success(sets);
	}
	
	@GetMapping(value = "/findRoles")
	public HttpResult<List<RoleDO>> findRoles(@RequestParam(name = "roleIds") String roleIds) {
		List<Long> rIds = Numbers.splitAsLongList(roleIds, ",");
		if(null == rIds || rIds.isEmpty()) {
			return HttpResult.success(Lists.newArrayList());
		}
		RoleQuery query = new RoleQuery();
		query.setIds(rIds);
		
		List<RoleDO> list = roleService.findList(query);
		return HttpResult.success(list);
	}
	
	/**
	 * BootstrapTable Data Api
	 */
	@GetMapping(value = "/bootstrapTableList")
    public Map<String, Object> listData(HttpServletRequest request, Model model) {
		RoleQuery query = WebUtil.parseObject(request, RoleQuery.class);
		int count = roleService.count(query);
		List<RoleDO> list = roleService.findList(query);
        Map<String, Object> map = Maps.newHashMap();
        map.put("rows", null == list ? new ArrayList<RoleDO>() : list);
        map.put("total", count);
        return map;
    }
	
	/**
	 * BootstrapTable Data Api
	 */
	@GetMapping(value = "/roleUserTableList")
    public Map<String, Object> roleUserList(HttpServletRequest request, Model model) {
		RoleUserQuery query = WebUtil.parseObject(request, RoleUserQuery.class);
		int count = userRoleDAO.countRoleUserList(query);
		List<RoleUserDO> list = userRoleDAO.queryRoleUserList(query);
        Map<String, Object> map = Maps.newHashMap();
        map.put("rows", null == list ? new ArrayList<RoleDO>() : list);
        map.put("total", count);
        return map;
    }
	
	/**
	 * BootstrapTable Data Api
	 */
	@GetMapping(value = "/userRoleTableList")
    public Map<String, Object> userRoleTableList(HttpServletRequest request, Model model) {
		RoleUserQuery query = WebUtil.parseObject(request, RoleUserQuery.class);
		int count = userRoleDAO.countUserRoleList(query);
		List<UserRoleExtDO> list = userRoleDAO.queryUserRoleList(query);
        Map<String, Object> map = Maps.newHashMap();
        map.put("rows", null == list ? new ArrayList<RoleDO>() : list);
        map.put("total", count);
        return map;
    }
	
	protected HttpResult<RoleDO> doDetail(Long id) {
		ResultDO<RoleDO> db = roleService.getById(id);
		return HttpResult.success(db.getEntry());
	}
	
	protected HttpResult<Boolean> doDelete(Long id) {
		ResultDO<RoleDO> db = roleService.getById(id);
		if(!db.isSuccess() || null == db.getEntry()) { // 不存在
			return HttpResult.failure("数据不存在或已被删除");
		}
		ResultDO<Boolean> operate = roleService.deleteById(id);
		if(!operate.isSuccess()) {
			return HttpResult.failure(operate.getMessage());
		}
		return HttpResult.success();
	}
	
}

