/* Automatic generated by CrudCodeGenerator wirtten by Gerald Chen
 *
 * @(#)${Entity}Controller.java	${date}
 *
 * Copyright (c) ${year}. All Rights Reserved.
 *
 */

package ${controllerPackage};

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import ${entityPackage}.${Entity}${entitySuffix};
import ${entityQueryPackage}.${Entity}Query;
import ${serviceApiPackage}.${Entity}Service;
import com.github.javaclub.sword.BizException;
import com.github.javaclub.sword.domain.QueryResult;
import com.github.javaclub.sword.domain.ResultDO;
import com.github.javaclub.sword.util.WebUtil;
import com.github.javaclub.sword.web.HttpResult;
import com.github.javaclub.sword.web.PageResultSet;
import com.google.common.collect.Maps;

/**
 * ${Entity}Controller
 *
 * @author <a href="mailto:gerald.chen.hz@gmail.com">Gerald Chen</a>
 * @version $Id: ${Entity}Controller.java ${datetime} Exp $
 */
@Controller
@RequestMapping("/api/${full_lower_entity}")
public class ${Entity}Controller {
	
	static final Logger log = LoggerFactory.getLogger(${Entity}Controller.class);
	
	@Autowired
	private ${Entity}Service ${entity}Service;
	
	@RequestMapping(value = "/saveRequest.do", method = RequestMethod.POST)
	@ResponseBody
	public HttpResult<${pkClass}> save(HttpServletRequest request) {
		${Entity}${entitySuffix} post = WebUtil.parseObject(request, ${Entity}${entitySuffix}.class);
		try {
			// validate check for ${Entity}${entitySuffix}
		} catch (BizException e) {
			return HttpResult.failure(e.getMessage());
		}
		
		return save(post);
	}
	
	@RequestMapping(value = "/save", method = RequestMethod.POST)
	@ResponseBody
	public HttpResult<${pkClass}> save(@RequestBody ${Entity}${entitySuffix} post) {
		ResultDO<Boolean> operate = ${entity}Service.save(post);
		if(!operate.isSuccess()) {
			return HttpResult.failure(operate.getMessage());
		}
		return HttpResult.success(post.getId());
	}
	
	@RequestMapping(value = "/detail", method = RequestMethod.GET)
	@ResponseBody
	public HttpResult<${Entity}${entitySuffix}> detail(${pkClass} id) {
		return doDetail(id);
	}
	
	@RequestMapping(value = "/detail/{id}", method = RequestMethod.GET)
	@ResponseBody
	public HttpResult<${Entity}${entitySuffix}> _detail(@PathVariable ${pkClass} id) {
		return doDetail(id);
	}

	@RequestMapping(value = "/delete", method = RequestMethod.POST)
	@ResponseBody
	public HttpResult<Boolean> delete(${pkClass} id) {
		return doDelete(id);
	}

	@RequestMapping(value = "/delete/{id}", method = RequestMethod.POST)
	@ResponseBody
	public HttpResult<Boolean> _delete(@PathVariable ${pkClass} id) {
		return doDelete(id);
	}
	
	@RequestMapping(value = "/list", method = RequestMethod.GET)
	@ResponseBody
	public HttpResult<PageResultSet<${Entity}${entitySuffix}>> list(@RequestBody ${Entity}Query request) {
		QueryResult<${Entity}${entitySuffix}> queryResult = ${entity}Service.findListWithCount(request);
		PageResultSet<${Entity}${entitySuffix}> sets = new PageResultSet<>(request.getPageNo(), request.getPageSize());
		sets.setAllRow(queryResult.getTotalCount());
		sets.setList(queryResult.getEntry());
		return HttpResult.success(sets);
	}
	
	/**
	 * BootstrapTable Data Api
	 */
	@RequestMapping(value = "/listData.do", method = RequestMethod.GET)
	@ResponseBody
    public Map<String, Object> listData(HttpServletRequest request, Model model) {
		${Entity}Query query = WebUtil.parseObject(request, ${Entity}Query.class);
		int count = ${entity}Service.count(query);
		List<${Entity}${entitySuffix}> list = ${entity}Service.findList(query);
        Map<String, Object> map = Maps.newHashMap();
        map.put("rows", null == list ? new ArrayList<${Entity}${entitySuffix}>() : list);
        map.put("total", count);
        return map;
    }
	
	protected HttpResult<${Entity}${entitySuffix}> doDetail(${pkClass} id) {
		ResultDO<${Entity}${entitySuffix}> db = ${entity}Service.getById(id);
		return HttpResult.success(db.getEntry());
	}
	
	protected HttpResult<Boolean> doDelete(${pkClass} id) {
		ResultDO<${Entity}${entitySuffix}> db = ${entity}Service.getById(id);
		if(!db.isSuccess() || null == db.getEntry()) { // 不存在
			return HttpResult.failure("数据不存在或已被删除");
		}
		ResultDO<Boolean> operate = ${entity}Service.deleteById(id);
		if(!operate.isSuccess()) {
			return HttpResult.failure(operate.getMessage());
		}
		return HttpResult.success();
	}
	
}

