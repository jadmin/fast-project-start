/* Automatic generated by CrudCodeGenerator wirtten by Gerald Chen
 *
 * @(#)${Entity}ServiceImpl.java	${date}
 *
 * Copyright (c) ${year}. All Rights Reserved.
 *
 */

package ${serviceImplPackage};

import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.github.javaclub.sword.core.BizObjects;
import ${daoPackage}.${Entity}${daoSuffix};
import ${entityPackage}.${Entity}${entitySuffix};
import ${entityQueryPackage}.${Entity}Query;
import ${serviceApiPackage}.${Entity}Service;
import com.github.javaclub.sword.domain.QueryResult;
import com.github.javaclub.sword.domain.ResultDO;
import com.github.javaclub.sword.domain.dto.BatchOperationDTO;
import com.github.javaclub.sword.domain.enumtype.BasicMessage;
import com.google.common.collect.Lists;

/**
 * ${Entity}ServiceImpl
 *
 * @version $Id: ${Entity}ServiceImpl.java ${datetime} Exp $
 */
@Service("${entity}Service")
public class ${Entity}ServiceImpl implements ${Entity}Service {
	
	static final Logger log = LoggerFactory.getLogger(${Entity}ServiceImpl.class);
	
	@Autowired
	private ${Entity}${daoSuffix} ${entity}${daoSuffix};

	/**
	 * 创建时的业务校验
	 * 
	 * @param ${entity}${entitySuffix} 业务实体
	 */
	void doCreateCheck(${Entity}${entitySuffix} ${entity}${entitySuffix}) {
		// TODO Auto-generated method stub
		
	}
	
	/**
	 * 更新时的业务校验
	 * 
	 * @param ${entity}${entitySuffix} 业务实体
	 */
	void doUpdateCheck(${Entity}${entitySuffix} ${entity}${entitySuffix}) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public ResultDO<Boolean> save(${Entity}${entitySuffix} ${entity}${entitySuffix}) {
		if(null == ${entity}${entitySuffix}.getId()) {
			return create(${entity}${entitySuffix});
		}
		${Entity}${entitySuffix} db = ${entity}${daoSuffix}.getById(${entity}${entitySuffix}.getId());
		if(null == db) {
			return ResultDO.failure(BasicMessage.NOT_FOUND);
		}
		return update(${entity}${entitySuffix});
	}

	@Override
	public ResultDO<Boolean> create(${Entity}${entitySuffix} ${entity}${entitySuffix}) {
		ResultDO<Boolean> result = ResultDO.failure();
		try {
			this.doCreateCheck(${entity}${entitySuffix});
			int num = ${entity}${daoSuffix}.insert(${entity}${entitySuffix});
			result = ResultDO.result(num > 0, "创建记录失败");
		} catch (Exception e) {
			log.error("", e);
			result.setMessage(e.getMessage());
		}
		return result;
	}

	@Override
	public BatchOperationDTO<${Entity}${entitySuffix}> createBatch(List<${Entity}${entitySuffix}> list) {
		BatchOperationDTO<${Entity}${entitySuffix}> bod = new BatchOperationDTO<${Entity}${entitySuffix}>();
		List<${Entity}${entitySuffix}> toAdd = Lists.newArrayList();
		for (${Entity}${entitySuffix} item : list) {
			try {
				this.doCreateCheck(item);
			} catch (Exception e) {
				bod.addFailure(item);
				continue;
			}
			toAdd.add(item);
		}
		
		try {
			if(toAdd.size() > 0) {
				${entity}${daoSuffix}.insertBatch(toAdd);
				bod.setSuccessList(toAdd);
			}
		} catch (Exception e) {
			bod.setMessage(e.getMessage());
			log.error("${Entity}Service createBatch", e);
		}
		
		return bod;
	}

	@Override
	public ResultDO<Boolean> update(${Entity}${entitySuffix} ${entity}${entitySuffix}) {
		ResultDO<Boolean> result = ResultDO.failure();
		try {
			BizObjects.requireNotNull(${entity}${entitySuffix}.getId(), "主键ID不能为空");
			this.doUpdateCheck(${entity}${entitySuffix});
			int num = ${entity}${daoSuffix}.update(${entity}${entitySuffix});
			result = ResultDO.result(num > 0, "没有记录被更新");
		} catch (Exception e) {
			log.error("", e);
			result.setMessage(e.getMessage());
		}
		return result;
	}

	@Override
	public ResultDO<Boolean> deleteById(${pkClass} id) {
		ResultDO<Boolean> result = ResultDO.failure();
		try {
			int num = ${entity}${daoSuffix}.deleteById(id);
			result = ResultDO.result(num > 0, "没有记录被删除");
		} catch (Exception e) {
			log.error("", e);
			result.setMessage(e.getMessage());
		}
		return result;
	}

	@Override
	public ResultDO<${Entity}${entitySuffix}> getById(${pkClass} id) {
		ResultDO<${Entity}${entitySuffix}> result = ResultDO.failure();
		try {
			${Entity}${entitySuffix} dbRecord = ${entity}${daoSuffix}.getById(id);
			if(null != dbRecord) {
				result = ResultDO.success(dbRecord);
			}
		} catch (Exception e) {
			log.error("", e);
			result.setMessage(e.getMessage());
		}
		
		return result;
	}
	
	@Override
	public ${Entity}${entitySuffix} selectById(${pkClass} id) {
		return ${entity}${daoSuffix}.getById(id);
	}
	
	@Override
	public ${Entity}${entitySuffix} selectOne(${Entity}Query query) {
		List<${Entity}${entitySuffix}> list = ${entity}${daoSuffix}.queryList(query);
		if(null != list && list.size() > 0) {
			return list.get(0);
		}
		return null;
	}

	@Override
	public int count(${Entity}Query query) {
		return ${entity}${daoSuffix}.count(query);
	}

	@Override
	public List<${Entity}${entitySuffix}> findList(${Entity}Query query) {
		return ${entity}${daoSuffix}.queryList(query);
	}

	@Override
	public QueryResult<${Entity}${entitySuffix}> findListWithCount(${Entity}Query query) {
		QueryResult<${Entity}${entitySuffix}> queryResult = new QueryResult<${Entity}${entitySuffix}>();
		try {
			List<${Entity}${entitySuffix}> list = ${entity}${daoSuffix}.queryList(query);
			int count = ${entity}${daoSuffix}.count(query);
			queryResult.setTotalCount(count);
			queryResult.setEntry(list);
			queryResult.setSuccess(true);
		} catch (Exception e) {
			log.error("", e);
			queryResult.setSuccess(false);
			queryResult.setMessage(e.getMessage());
		}
		return queryResult;
	}

}
