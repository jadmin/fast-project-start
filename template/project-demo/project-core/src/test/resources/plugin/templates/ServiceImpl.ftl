/* Automatic generated by CrudCodeGenerator wirtten by Gerald Chen
 *
 * @(#)${Entity}ServiceImpl.java	${date}
 *
 * Copyright (c) ${year}. All Rights Reserved.
 *
 */

package ${serviceImplPackage};

import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.github.javaclub.sword.core.B;
import ${daoPackage}.${Entity}DAO;
import ${entityPackage}.${Entity}DO;
import ${entityQueryPackage}.${Entity}Query;
import ${serviceApiPackage}.${Entity}Service;
import com.github.javaclub.sword.domain.QueryResult;
import com.github.javaclub.sword.domain.ResultDO;
import com.github.javaclub.sword.domain.dto.BatchOperationDTO;
import com.github.javaclub.sword.domain.enumtype.BasicMessage;
import com.google.common.collect.Lists;

/**
 * ${Entity}ServiceImpl
 *
 * @version $Id: ${Entity}ServiceImpl.java ${datetime} Exp $
 */
@Service("${entity}Service")
public class ${Entity}ServiceImpl implements ${Entity}Service {
	
	static final Logger log = LoggerFactory.getLogger(${Entity}ServiceImpl.class);
	
	@Autowired
	private ${Entity}DAO ${entity}DAO;

	/**
	 * 创建时的业务校验
	 * 
	 * @param ${entity}DO 业务实体DO
	 */
	void doCreateCheck(${Entity}DO ${entity}DO) {
		// TODO Auto-generated method stub
		
	}
	
	/**
	 * 更新时的业务校验
	 * 
	 * @param ${entity}DO 业务实体DO
	 */
	void doUpdateCheck(${Entity}DO ${entity}DO) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public ResultDO<Boolean> save(${Entity}DO ${entity}DO) {
		if(null == ${entity}DO.getId()) {
			return create(${entity}DO);
		}
		${Entity}DO db = ${entity}DAO.getById(${entity}DO.getId());
		if(null == db) {
			return ResultDO.failure(BasicMessage.NOT_FOUND);
		}
		return update(${entity}DO);
	}

	@Override
	public ResultDO<Boolean> create(${Entity}DO ${entity}DO) {
		ResultDO<Boolean> result = ResultDO.failure();
		try {
			this.doCreateCheck(${entity}DO);
			int num = ${entity}DAO.insert(${entity}DO);
			result = ResultDO.result(num > 0, "创建记录失败");
		} catch (Exception e) {
			log.error("", e);
			result.setMessage(e.getMessage());
		}
		return result;
	}

	@Override
	public BatchOperationDTO<${Entity}DO> createBatch(List<${Entity}DO> list) {
		BatchOperationDTO<${Entity}DO> bod = new BatchOperationDTO<${Entity}DO>();
		List<${Entity}DO> toAdd = Lists.newArrayList();
		for (${Entity}DO item : list) {
			try {
				this.doCreateCheck(item);
			} catch (Exception e) {
				bod.addFailure(item);;
			}
			toAdd.add(item);
		}
		
		try {
			if(toAdd.size() > 0) {
				${entity}DAO.insertBatch(toAdd);
				bod.setSuccessList(toAdd);
			}
		} catch (Exception e) {
			bod.setMessage(e.getMessage());
		}
		
		return bod;
	}

	@Override
	public ResultDO<Boolean> update(${Entity}DO ${entity}DO) {
		ResultDO<Boolean> result = ResultDO.failure();
		try {
			B.requireNotNullGtZero(${entity}DO.getId(), "主键ID不能为空");
			this.doUpdateCheck(${entity}DO);
			int num = ${entity}DAO.update(${entity}DO);
			result = ResultDO.result(num > 0, "没有记录被更新");
		} catch (Exception e) {
			log.error("", e);
			result.setMessage(e.getMessage());
		}
		return result;
	}

	@Override
	public ResultDO<Boolean> deleteById(Long id) {
		ResultDO<Boolean> result = ResultDO.failure();
		try {
			int num = ${entity}DAO.deleteById(id);
			result = ResultDO.result(num > 0, "没有记录被删除");
		} catch (Exception e) {
			log.error("", e);
			result.setMessage(e.getMessage());
		}
		return result;
	}

	@Override
	public ResultDO<${Entity}DO> getById(Long id) {
		ResultDO<${Entity}DO> result = ResultDO.failure();
		try {
			${Entity}DO mytest = ${entity}DAO.getById(id);
			if(null != mytest) {
				result.setSuccess(true);
				result.setEntry(mytest);
			}
		} catch (Exception e) {
			log.error("", e);
			result.setMessage(e.getMessage());
		}
		
		return result;
	}

	@Override
	public int count(${Entity}Query query) {
		return ${entity}DAO.count(query);
	}

	@Override
	public List<${Entity}DO> findList(${Entity}Query query) {
		return ${entity}DAO.queryList(query);
	}

	@Override
	public QueryResult<${Entity}DO> findListWithCount(${Entity}Query query) {
		QueryResult<${Entity}DO> queryResult = new QueryResult<${Entity}DO>();
		try {
			List<${Entity}DO> list = ${entity}DAO.queryList(query);
			int count = ${entity}DAO.count(query);
			queryResult.setTotalCount(count);
			queryResult.setEntry(list);
			queryResult.setSuccess(true);
		} catch (Exception e) {
			log.error("", e);
			queryResult.setSuccess(false);
			queryResult.setMessage(e.getMessage());
		}
		return queryResult;
	}

}
